namespace CORE_NAME
{
	enum RC
	{
		RC_INVALID = -1,
		RC_OK = 0,
		RC_ERROR = 1,
		RC_INTERNAL = 2,
		RC_PERM = 3,
		RC_ABORT = 4,
		RC_ABORT_ROLLBACK =			(RC_ABORT | (1 << 8)),
		RC_BUSY = 5,
		RC_BUSY_RECOVERY =			(RC_BUSY | (1 << 8)),
		RC_LOCKED = 6,
		RC_LOCKED_SHAREDCACHE =		(RC_LOCKED | (1 << 8)),
		RC_NOMEM = 7,
		RC_READONLY = 8,
		RC_READONLY_RECOVERY =		(RC_READONLY | (1 << 8)),
		RC_READONLY_CANTLOCK =		(RC_READONLY | (2 << 8)),
		RC_READONLY_ROLLBACK =		(RC_READONLY | (3 << 8)),
		RC_INTERRUPT = 9,
		RC_IOERR = 10,
		RC_IOERR_READ =				(RC_IOERR | (1 << 8)),
		RC_IOERR_SHORT_READ =		(RC_IOERR | (2 << 8)),
		RC_IOERR_WRITE =			(RC_IOERR | (3 << 8)),
		RC_IOERR_FSYNC =			(RC_IOERR | (4 << 8)),
		RC_IOERR_DIR_FSYNC =		(RC_IOERR | (5 << 8)),
		RC_IOERR_TRUNCATE =			(RC_IOERR | (6 << 8)),
		RC_IOERR_FSTAT =			(RC_IOERR | (7 << 8)),
		RC_IOERR_UNLOCK =			(RC_IOERR | (8 << 8)),
		RC_IOERR_RDLOCK =			(RC_IOERR | (9 << 8)),
		RC_IOERR_DELETE =			(RC_IOERR | (10 << 8)),
		RC_IOERR_BLOCKED =			(RC_IOERR | (11 << 8)),
		RC_IOERR_NOMEM =			(RC_IOERR | (12 << 8)),
		RC_IOERR_ACCESS =			(RC_IOERR | (13 << 8)),
		RC_IOERR_CHECKRESERVEDLOCK = (RC_IOERR | (14 << 8)),
		RC_IOERR_LOCK =				(RC_IOERR | (15 << 8)),
		RC_IOERR_CLOSE =			(RC_IOERR | (16 << 8)),
		RC_IOERR_DIR_CLOSE =		(RC_IOERR | (17 << 8)),
		RC_IOERR_SHMOPEN =			(RC_IOERR | (18 << 8)),
		RC_IOERR_SHMSIZE =			(RC_IOERR | (19 << 8)),
		RC_IOERR_SHMLOCK =			(RC_IOERR | (20 << 8)),
		RC_IOERR_SHMMAP =			(RC_IOERR | (21 << 8)),
		RC_IOERR_SEEK =				(RC_IOERR | (22 << 8)),
		RC_IOERR_DELETE_NOENT =		(RC_IOERR | (23 << 8)),
		RC_CORRUPT = 11,
		RC_CORRUPT_VTAB =			(RC_CORRUPT | (1 << 8)),
		RC_NOTFOUND = 12,
		RC_FULL = 13,
		RC_CANTOPEN = 14,
		RC_CANTOPEN_NOTEMPDIR =		(RC_CANTOPEN | (1 << 8)),
		RC_CANTOPEN_ISDIR =			(RC_CANTOPEN | (2 << 8)),
		RC_CANTOPEN_FULLPATH =      (RC_CANTOPEN | (3 << 8)),
		RC_PROTOCOL = 15,
		RC_EMPTY = 16,
		RC_SCHEMA = 17,
		RC_TOOBIG = 18,
		RC_CONSTRAINT = 19,
		RC_CONSTRAINT_CHECK =		(RC_CONSTRAINT | (1 << 8)),
		RC_CONSTRAINT_COMMITHOOK =	(RC_CONSTRAINT | (2 << 8)), 
		RC_CONSTRAINT_FOREIGNKEY =	(RC_CONSTRAINT | (3 << 8)),
		RC_CONSTRAINT_FUNCTION =	(RC_CONSTRAINT | (4 << 8)),
		RC_CONSTRAINT_NOTNULL =		(RC_CONSTRAINT | (5 << 8)),
		RC_CONSTRAINT_PRIMARYKEY =	(RC_CONSTRAINT | (6 << 8)),
		RC_CONSTRAINT_TRIGGER =		(RC_CONSTRAINT | (7 << 8)),
		RC_CONSTRAINT_UNIQUE =		(RC_CONSTRAINT | (8 << 8)),
		RC_CONSTRAINT_VTAB =		(RC_CONSTRAINT | (9 << 8)),
		RC_MISMATCH = 20,
		RC_MISUSE = 21,
		RC_NOLFS = 22,
		RC_AUTH = 23,
		RC_FORMAT = 24,
		RC_RANGE = 25,
		RC_NOTADB = 26,
		RC_ROW = 100,
		RC_DONE = 101,
	};

	__device__ __forceinline void operator|=(RC &a, int b) { a = (RC)(a | b); }
	__device__ __forceinline void operator&=(RC &a, int b) { a = (RC)(a & b); }
}
